{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import\"./App.css\";import PixelGrid from\"./PixelGrid\";import Toolbar from\"./Toolbar\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const URL=process.env.BACKEND_URL;const App=()=>{const[selectedColor,setSelectedColor]=useState(\"black\");const[grid,setGrid]=useState([]);useEffect(()=>{fetch(\"\".concat(URL,\"/grid\")).then(response=>response.json()).then(data=>setGrid(data.grid)).catch(error=>console.error(\"Error fetching grid data:\",error));},[]);const updateColor=async(x,y)=>{try{const response=await fetch(\"\".concat(URL,\"/setGridColor\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({x,y,color:selectedColor})});const{grid:updatedGrid}=await response.json();setGrid(updatedGrid);}catch(error){console.error(\"Error updating grid color:\",error);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"content-wrapper\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Pixel Grid\"}),/*#__PURE__*/_jsx(PixelGrid,{grid:grid,updateColor:updateColor}),/*#__PURE__*/_jsx(Toolbar,{selectedColor:selectedColor,setSelectedColor:setSelectedColor})]});};export default App;","map":{"version":3,"names":["React","useEffect","useState","PixelGrid","Toolbar","jsx","_jsx","jsxs","_jsxs","URL","process","env","BACKEND_URL","App","selectedColor","setSelectedColor","grid","setGrid","fetch","concat","then","response","json","data","catch","error","console","updateColor","x","y","method","headers","body","JSON","stringify","color","updatedGrid","className","children"],"sources":["S:/Coding/Deploy2/Pixel-Grid/client/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport PixelGrid from \"./PixelGrid\";\r\nimport Toolbar from \"./Toolbar\";\r\n\r\nconst URL = process.env.BACKEND_URL;\r\n\r\nconst App = () => {\r\n  const [selectedColor, setSelectedColor] = useState(\"black\");\r\n  const [grid, setGrid] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`${URL}/grid`)\r\n      .then((response) => response.json())\r\n      .then((data) => setGrid(data.grid))\r\n      .catch((error) => console.error(\"Error fetching grid data:\", error));\r\n  }, []);\r\n\r\n  const updateColor = async (x, y) => {\r\n    try {\r\n      const response = await fetch(`${URL}/setGridColor`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ x, y, color: selectedColor }),\r\n      });\r\n      const { grid: updatedGrid } = await response.json();\r\n      setGrid(updatedGrid);\r\n    } catch (error) {\r\n      console.error(\"Error updating grid color:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-wrapper\">\r\n      <h1>Pixel Grid</h1>\r\n      <PixelGrid grid={grid} updateColor={updateColor} />\r\n      <Toolbar\r\n        selectedColor={selectedColor}\r\n        setSelectedColor={setSelectedColor}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,WAAW,CAClB,MAAO,CAAAC,SAAS,KAAM,aAAa,CACnC,MAAO,CAAAC,OAAO,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,GAAG,CAAGC,OAAO,CAACC,GAAG,CAACC,WAAW,CAEnC,KAAM,CAAAC,GAAG,CAAGA,CAAA,GAAM,CAChB,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGb,QAAQ,CAAC,OAAO,CAAC,CAC3D,KAAM,CAACc,IAAI,CAAEC,OAAO,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAEpCD,SAAS,CAAC,IAAM,CACdiB,KAAK,IAAAC,MAAA,CAAIV,GAAG,SAAO,CAAC,CACjBW,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,EAAKN,OAAO,CAACM,IAAI,CAACP,IAAI,CAAC,CAAC,CAClCQ,KAAK,CAAEC,KAAK,EAAKC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CAAC,CACxE,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,WAAW,CAAG,KAAAA,CAAOC,CAAC,CAAEC,CAAC,GAAK,CAClC,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAH,KAAK,IAAAC,MAAA,CAAIV,GAAG,kBAAiB,CAClDqB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEN,CAAC,CAAEC,CAAC,CAAEM,KAAK,CAAErB,aAAc,CAAC,CACrD,CAAC,CAAC,CACF,KAAM,CAAEE,IAAI,CAAEoB,WAAY,CAAC,CAAG,KAAM,CAAAf,QAAQ,CAACC,IAAI,CAAC,CAAC,CACnDL,OAAO,CAACmB,WAAW,CAAC,CACtB,CAAE,MAAOX,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CACpD,CACF,CAAC,CAED,mBACEjB,KAAA,QAAK6B,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9BhC,IAAA,OAAAgC,QAAA,CAAI,YAAU,CAAI,CAAC,cACnBhC,IAAA,CAACH,SAAS,EAACa,IAAI,CAAEA,IAAK,CAACW,WAAW,CAAEA,WAAY,CAAE,CAAC,cACnDrB,IAAA,CAACF,OAAO,EACNU,aAAa,CAAEA,aAAc,CAC7BC,gBAAgB,CAAEA,gBAAiB,CACpC,CAAC,EACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}